#include<iostream>
using namespace std;
#define MAXSIZE 10

typedef struct stack
{
    int data[MAXSIZE];
    int top;
}Stack;

Stack Init(Stack arrStack)
{
    arrStack.top = -1;
    return arrStack;
}
bool Empty(Stack arrStack)
{
    if(arrStack.top == -1)
        return true;
    else
        return false;
}
bool full(Stack arrStack)
{
    if(arrStack.top == MAXSIZE-1)
        return true;

    else
        return false;
}
Stack Push(Stack arrStack,int element)
{
    if(!full(arrStack))
    {
        arrStack.top++;
        arrStack.data[arrStack.top] = element;
    }
    else
        printf("stack is full");
    return arrStack;
}
Stack Pop(Stack arrStack)
{
    if(!Empty(arrStack))
        arrStack.top--;
    else
        printf("empty stack");
    return arrStack;
}
int Top(Stack arrStack)
{
    if(!Empty(arrStack))
        return arrStack.data[arrStack.top];
    else
    {
        printf(" empty stack");
        return -1;
    }
}
Stack Destroy(Stack arrStack)
{
    arrStack.top = -1;
    return arrStack;
}
int main()
{
    Stack arrStack;
    printf("--------init stack----------\n");
    arrStack=Init(arrStack);
    printf("----------push stack--------\n");
    for(int i = 0;i<MAXSIZE;i++){
        printf("push the %d element is %d\n",i+1,i);
        arrStack=Push(arrStack,i);
    }
    printf("-----Topelement&popstack-----\n");
    printf("%d\n",Top(arrStack));
    arrStack=Pop(arrStack);
    printf("%d\n",Top(arrStack));
    arrStack=Pop(arrStack);

    return 0;

}
